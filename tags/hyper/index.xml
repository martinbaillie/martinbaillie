<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyper on Martin Baillie</title><link>https://martin.baillie.id/tags/hyper/</link><description>Recent content in hyper on Martin Baillie</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><copyright>Â© Martin Baillie</copyright><lastBuildDate>Sun, 27 Sep 2020 19:09:00 +1000</lastBuildDate><atom:link href="https://martin.baillie.id/tags/hyper/index.xml" rel="self" type="application/rss+xml"/><item><title>Controlling Client SNI with Hyper</title><link>https://martin.baillie.id/wrote/controlling-client-sni-with-hyper/</link><pubDate>Sun, 27 Sep 2020 19:09:00 +1000</pubDate><guid>https://martin.baillie.id/wrote/controlling-client-sni-with-hyper/</guid><description>I recently revisited Rust after a few years hiatus and in one project I found myself needing to provide a different Server Name Indicator (SNI) when initiating a TLS connection to a remote host.
In Go this is as simple as setting the ServerName field on the standard library&amp;rsquo;s TLS configuration struct.
(&amp;amp;http.Client{ Transport: &amp;amp;http.Transport{ TLSClientConfig: &amp;amp;tls.Config{ ServerName: &amp;#34;somewhere.com&amp;#34;, }, }, }).Get(&amp;#34;https://somewhere-else.com&amp;#34;) And is also what you can achieve with the openssl and curl CLIs for example.</description></item></channel></rss>